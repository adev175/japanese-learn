#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Japanese Subtitle Search & Auto Player
T√¨m ki·∫øm t·ª´ trong database subtitle v√† t·ª± ƒë·ªông m·ªü YouTube t·∫°i timestamp ch√≠nh x√°c
"""

import sqlite3
import webbrowser
import re
import sys
import os
from typing import List, Dict, Tuple, Optional
from urllib.parse import urlencode
import time


class SubtitleSearchPlayer:
    def __init__(self, db_name: str = "japanese_subtitles.db"):
        self.db_name = db_name
        self.check_database()

    def check_database(self):
        """Ki·ªÉm tra xem database c√≥ t·ªìn t·∫°i kh√¥ng"""
        if not os.path.exists(self.db_name):
            print(f"‚ùå Database '{self.db_name}' kh√¥ng t·ªìn t·∫°i!")
            print("H√£y ch·∫°y c√¥ng c·ª• download subtitle tr∆∞·ªõc ƒë·ªÉ t·∫°o database.")
            sys.exit(1)

        # Ki·ªÉm tra c√≥ d·ªØ li·ªáu kh√¥ng
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM subtitles")
        count = cursor.fetchone()[0]
        conn.close()

        if count == 0:
            print("‚ùå Database tr·ªëng! H√£y t·∫£i subtitle tr∆∞·ªõc.")
            sys.exit(1)

        print(f"‚úÖ Database s·∫µn s√†ng v·ªõi {count} subtitle entries")

    def search_word_in_subtitles(self, search_word: str, exact_match: bool = False,
                                 limit: int = 20) -> List[Dict]:
        """
        T√¨m ki·∫øm t·ª´ trong database subtitle

        Args:
            search_word: T·ª´ c·∫ßn t√¨m (c√≥ th·ªÉ l√† ti·∫øng Nh·∫≠t, romaji, ho·∫∑c ti·∫øng Vi·ªát)
            exact_match: True n·∫øu mu·ªën t√¨m ch√≠nh x√°c, False cho t√¨m ki·∫øm m·ªù
            limit: Gi·ªõi h·∫°n s·ªë k·∫øt qu·∫£
        """
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        if exact_match:
            # T√¨m ki·∫øm ch√≠nh x√°c
            query = """
                SELECT video_id, video_url, japanese_text, start_time, end_time, 
                       duration, sequence_number
                FROM subtitles 
                WHERE japanese_text = ?
                ORDER BY video_id, start_time
                LIMIT ?
            """
            cursor.execute(query, (search_word, limit))
        else:
            # T√¨m ki·∫øm m·ªù - ch·ª©a t·ª´ ƒë√≥
            query = """
                SELECT video_id, video_url, japanese_text, start_time, end_time, 
                       duration, sequence_number
                FROM subtitles 
                WHERE japanese_text LIKE ?
                ORDER BY video_id, start_time
                LIMIT ?
            """
            cursor.execute(query, (f'%{search_word}%', limit))

        results = []
        for row in cursor.fetchall():
            video_id, video_url, japanese_text, start_time, end_time, duration, seq_num = row

            results.append({
                'video_id': video_id,
                'video_url': video_url,
                'japanese_text': japanese_text,
                'start_time': start_time,
                'end_time': end_time,
                'duration': duration,
                'sequence_number': seq_num,
                'timestamp_url': self.create_timestamp_url(video_url, start_time)
            })

        conn.close()
        return results

    def create_timestamp_url(self, video_url: str, start_time: float) -> str:
        """T·∫°o URL YouTube v·ªõi timestamp"""
        # Chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ gi√¢y sang ƒë·ªãnh d·∫°ng YouTube
        start_seconds = int(start_time)

        # N·∫øu URL ƒë√£ c√≥ timestamp, thay th·∫ø n√≥
        if 't=' in video_url or '#t=' in video_url:
            # Lo·∫°i b·ªè timestamp c≈©
            video_url = re.sub(r'[&#]t=\d+', '', video_url)
            video_url = re.sub(r'[&#]start=\d+', '', video_url)

        # Th√™m timestamp m·ªõi
        separator = '&' if '?' in video_url else '?'
        return f"{video_url}{separator}t={start_seconds}s"

    def format_time(self, seconds: float) -> str:
        """Chuy·ªÉn ƒë·ªïi gi√¢y th√†nh ƒë·ªãnh d·∫°ng mm:ss ho·∫∑c hh:mm:ss"""
        total_seconds = int(seconds)
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        secs = total_seconds % 60

        if hours > 0:
            return f"{hours:02d}:{minutes:02d}:{secs:02d}"
        else:
            return f"{minutes:02d}:{secs:02d}"

    def highlight_search_term(self, text: str, search_term: str) -> str:
        """Highlight t·ª´ t√¨m ki·∫øm trong text (cho terminal)"""
        if not search_term:
            return text

        # S·ª≠ d·ª•ng ANSI color codes ƒë·ªÉ highlight
        highlighted = re.sub(
            f'({re.escape(search_term)})',
            r'\033[93m\1\033[0m',  # Yellow highlight
            text,
            flags=re.IGNORECASE
        )
        return highlighted

    def display_search_results(self, results: List[Dict], search_term: str = ""):
        """Hi·ªÉn th·ªã k·∫øt qu·∫£ t√¨m ki·∫øm"""
        if not results:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ cho '{search_term}'")
            return

        print(f"\nüîç T√¨m th·∫•y {len(results)} k·∫øt qu·∫£ cho '{search_term}':")
        print("=" * 80)

        for i, result in enumerate(results, 1):
            # Highlight search term
            highlighted_text = self.highlight_search_term(result['japanese_text'], search_term)

            print(f"{i:2d}. {highlighted_text}")
            print(f"    ‚è∞ Th·ªùi gian: {self.format_time(result['start_time'])} - {self.format_time(result['end_time'])}")
            print(f"    üé• Video ID: {result['video_id']}")
            print(f"    üîó URL: {result['timestamp_url']}")
            print()

    def get_video_context(self, video_id: str, target_time: float,
                          context_seconds: int = 10) -> List[Dict]:
        """
        L·∫•y ng·ªØ c·∫£nh xung quanh th·ªùi ƒëi·ªÉm t√¨m th·∫•y (subtitle tr∆∞·ªõc v√† sau)

        Args:
            video_id: ID c·ªßa video
            target_time: Th·ªùi gian c·ªßa subtitle t√¨m th·∫•y
            context_seconds: S·ªë gi√¢y tr∆∞·ªõc v√† sau ƒë·ªÉ l·∫•y ng·ªØ c·∫£nh
        """
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        query = """
            SELECT japanese_text, start_time, end_time, sequence_number
            FROM subtitles 
            WHERE video_id = ? 
              AND start_time BETWEEN ? AND ?
            ORDER BY start_time
        """

        start_range = target_time - context_seconds
        end_range = target_time + context_seconds

        cursor.execute(query, (video_id, start_range, end_range))

        context = []
        for row in cursor.fetchall():
            text, start_time, end_time, seq_num = row
            context.append({
                'text': text,
                'start_time': start_time,
                'end_time': end_time,
                'sequence_number': seq_num,
                'is_target': abs(start_time - target_time) < 1.0  # ƒê√°nh d·∫•u subtitle target
            })

        conn.close()
        return context

    def show_context(self, video_id: str, target_time: float, search_term: str = ""):
        """Hi·ªÉn th·ªã ng·ªØ c·∫£nh xung quanh subtitle t√¨m th·∫•y"""
        context = self.get_video_context(video_id, target_time, context_seconds=15)

        if not context:
            return

        print(f"\nüìñ Ng·ªØ c·∫£nh xung quanh (Video: {video_id}):")
        print("-" * 60)

        for item in context:
            time_str = self.format_time(item['start_time'])

            if item['is_target']:
                # Highlight subtitle ch√≠nh
                text = self.highlight_search_term(item['text'], search_term)
                print(f"üëâ [{time_str}] {text}")
            else:
                print(f"   [{time_str}] {item['text']}")

        print("-" * 60)

    def open_youtube_video(self, url: str, show_confirmation: bool = True):
        """M·ªü video YouTube trong browser"""
        try:
            if show_confirmation:
                confirm = input(f"\nüé¨ M·ªü video YouTube? (y/n): ").strip().lower()
                if confirm not in ['y', 'yes', 'c√≥', 'c']:
                    print("‚ùå ƒê√£ h·ªßy.")
                    return False

            print(f"üöÄ ƒêang m·ªü: {url}")
            webbrowser.open(url)
            return True

        except Exception as e:
            print(f"‚ùå L·ªói khi m·ªü browser: {e}")
            return False

    def advanced_search(self, search_term: str, filters: Dict = None) -> List[Dict]:
        """
        T√¨m ki·∫øm n√¢ng cao v·ªõi c√°c b·ªô l·ªçc

        filters c√≥ th·ªÉ ch·ª©a:
        - min_duration: Th·ªùi l∆∞·ª£ng t·ªëi thi·ªÉu (gi√¢y)
        - max_duration: Th·ªùi l∆∞·ª£ng t·ªëi ƒëa (gi√¢y)
        - video_ids: Danh s√°ch video ID c·ª• th·ªÉ
        - exclude_short: Lo·∫°i b·ªè subtitle qu√° ng·∫Øn
        """
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        base_query = """
            SELECT video_id, video_url, japanese_text, start_time, end_time, 
                   duration, sequence_number
            FROM subtitles 
            WHERE japanese_text LIKE ?
        """

        params = [f'%{search_term}%']
        conditions = []

        if filters:
            if filters.get('min_duration'):
                conditions.append("duration >= ?")
                params.append(filters['min_duration'])

            if filters.get('max_duration'):
                conditions.append("duration <= ?")
                params.append(filters['max_duration'])

            if filters.get('video_ids'):
                placeholders = ','.join(['?' for _ in filters['video_ids']])
                conditions.append(f"video_id IN ({placeholders})")
                params.extend(filters['video_ids'])

            if filters.get('exclude_short'):
                conditions.append("LENGTH(japanese_text) > 5")

        if conditions:
            base_query += " AND " + " AND ".join(conditions)

        base_query += " ORDER BY video_id, start_time LIMIT 50"

        cursor.execute(base_query, params)

        results = []
        for row in cursor.fetchall():
            video_id, video_url, japanese_text, start_time, end_time, duration, seq_num = row

            results.append({
                'video_id': video_id,
                'video_url': video_url,
                'japanese_text': japanese_text,
                'start_time': start_time,
                'end_time': end_time,
                'duration': duration,
                'sequence_number': seq_num,
                'timestamp_url': self.create_timestamp_url(video_url, start_time)
            })

        conn.close()
        return results

    def interactive_search(self):
        """Giao di·ªán t√¨m ki·∫øm t∆∞∆°ng t√°c"""
        print("üéå Japanese Subtitle Search & Player")
        print("=" * 40)
        print("T√¨m ki·∫øm t·ª´ trong database subtitle v√† t·ª± ƒë·ªông m·ªü YouTube")
        print("G√µ 'quit' ƒë·ªÉ tho√°t\n")

        while True:
            search_term = input("üîç Nh·∫≠p t·ª´ c·∫ßn t√¨m: ").strip()

            if search_term.lower() in ['quit', 'exit', 'q', 'tho√°t']:
                print("üëã T·∫°m bi·ªát!")
                break

            if not search_term:
                print("‚ùå Vui l√≤ng nh·∫≠p t·ª´ c·∫ßn t√¨m.")
                continue

            # T√¨m ki·∫øm
            print(f"\nüîÑ ƒêang t√¨m ki·∫øm '{search_term}'...")
            results = self.search_word_in_subtitles(search_term, limit=15)

            if not results:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y '{search_term}' trong database.")
                continue

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            self.display_search_results(results, search_term)

            while True:
                try:
                    action = input(
                        "\nüéØ Ch·ªçn h√†nh ƒë·ªông: (s·ªë) m·ªü video, (c)ontext, (n)ew search, (q)uit: ").strip().lower()

                    if action in ['q', 'quit', 'tho√°t']:
                        return
                    elif action in ['n', 'new', 'm·ªõi']:
                        break
                    elif action in ['c', 'context', 'ng·ªØ c·∫£nh']:
                        # Hi·ªÉn th·ªã ng·ªØ c·∫£nh cho k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                        if results:
                            self.show_context(results[0]['video_id'],
                                              results[0]['start_time'],
                                              search_term)
                    elif action.isdigit():
                        choice = int(action)
                        if 1 <= choice <= len(results):
                            selected = results[choice - 1]

                            # Hi·ªÉn th·ªã ng·ªØ c·∫£nh
                            self.show_context(selected['video_id'],
                                              selected['start_time'],
                                              search_term)

                            # M·ªü video
                            self.open_youtube_video(selected['timestamp_url'])
                            break
                        else:
                            print(f"‚ùå Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn {len(results)}")
                    else:
                        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")

                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë ho·∫∑c l·ªánh h·ª£p l·ªá.")
                except KeyboardInterrupt:
                    print("\nüëã ƒê√£ d·ª´ng.")
                    return

    def quick_search_and_play(self, search_term: str, auto_play: bool = False):
        """T√¨m ki·∫øm nhanh v√† m·ªü video ƒë·∫ßu ti√™n"""
        print(f"üîç T√¨m ki·∫øm: '{search_term}'")

        results = self.search_word_in_subtitles(search_term, limit=5)

        if not results:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y '{search_term}'")
            return

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ng·∫Øn g·ªçn
        print(f"‚úÖ T√¨m th·∫•y {len(results)} k·∫øt qu·∫£:")
        for i, result in enumerate(results[:3], 1):
            print(f"{i}. {result['japanese_text'][:50]}... [{self.format_time(result['start_time'])}]")

        # L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n
        first_result = results[0]

        # Hi·ªÉn th·ªã ng·ªØ c·∫£nh
        self.show_context(first_result['video_id'],
                          first_result['start_time'],
                          search_term)

        # M·ªü video
        self.open_youtube_video(first_result['timestamp_url'],
                                show_confirmation=not auto_play)

    def get_database_stats(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ database"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # T·ªïng s·ªë subtitle entries
        cursor.execute("SELECT COUNT(*) FROM subtitles")
        total_entries = cursor.fetchone()[0]

        # S·ªë video unique
        cursor.execute("SELECT COUNT(DISTINCT video_id) FROM subtitles")
        unique_videos = cursor.fetchone()[0]

        # Video ph·ªï bi·∫øn nh·∫•t
        cursor.execute("""
            SELECT video_id, COUNT(*) as count 
            FROM subtitles 
            GROUP BY video_id 
            ORDER BY count DESC 
            LIMIT 5
        """)
        top_videos = cursor.fetchall()

        conn.close()

        print(f"\nüìä Th·ªëng k√™ Database:")
        print(f"üìù T·ªïng subtitle entries: {total_entries:,}")
        print(f"üé• S·ªë video: {unique_videos}")
        print(f"üìà Top 5 video nhi·ªÅu subtitle nh·∫•t:")
        for video_id, count in top_videos:
            print(f"   {video_id}: {count} entries")


def main():
    """S·ª≠ d·ª•ng ch√≠nh"""
    player = SubtitleSearchPlayer()

    if len(sys.argv) > 1:
        # Command line mode
        search_term = ' '.join(sys.argv[1:])

        if search_term == '--stats':
            player.get_database_stats()
        else:
            player.quick_search_and_play(search_term)
    else:
        # Interactive mode
        player.interactive_search()


if __name__ == "__main__":
    main()